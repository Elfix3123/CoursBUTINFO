/*================================================================*/
/* Martins Felix - TP05 : Triggers pour vérifier des contraintes complexes 
/*================================================================*/

/*=============================*/
/* Section 1 : Triggers pour vérifier des contraintes complexes
/*=============================*/
/***********************************************************/
/* 1 - Adhérent
/***********************************************************/

CREATE OR REPLACE FUNCTION f_adherent_skipper()
RETURNS trigger
AS $$
BEGIN
	IF old.skipper AND NOT new.skipper THEN 
		RAISE EXCEPTION 'Un adherent ne peut pas perdre l''agrément skipper';
	END IF;
	RETURN new;
END $$
LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER t_adherent_skipper
BEFORE UPDATE
ON adherent
FOR EACH ROW
EXECUTE FUNCTION f_adherent_skipper();

UPDATE adherent SET skipper = false WHERE skipper = true;
>>> ERROR:  Un adherent ne peut pas perdre l'agrément skipper
>>> CONTEXT:  PL/pgSQL function f_adherent_skipper() line 4 at RAISE

UPDATE adherent SET skipper = true WHERE numadh = 18;
>>> UPDATE 1

/***********************************************************/
/* 2 - Course
/***********************************************************/

CREATE OR REPLACE FUNCTION f_course_overlap()
RETURNS trigger
AS $$
DECLARE
	tuple_dates RECORD;
BEGIN
	IF EXISTS(	SELECT *
				FROM course
				WHERE (datedebut, datefin) 
				OVERLAPS (new.datedebut, new.datefin)
				AND numcourse != new.numcourse) THEN
		RAISE EXCEPTION 'Le seul jour commun possible entre deux courses est le dernier jour de l''une et le premier jour de l''autre.';
	END IF;
	RETURN new;
END $$
LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER t_course_overlap
BEFORE INSERT OR UPDATE
ON course
FOR EACH ROW
EXECUTE FUNCTION f_course_overlap();

insert into course values (3, 'Port_', '2021-05-01', '2021-05-03');
>>> INSERT 0 1

insert into course values (4, 'Port_1', '2021-05-02', '2021-05-04');
>>> ERROR:  Le seul jour commun possible entre deux courses est le dernier jour de l'une et le premier jour de l'autre.
>>> CONTEXT:  PL/pgSQL function f_course_overlap() line 12 at RAISE

insert into course values (4, 'Port_1', '2021-05-03', '2021-05-04');
>>> INSERT 0 1

UPDATE course SET datedebut = '2021-05-02' WHERE numcourse = 4;
>>> NOTICE:  2021-05-01  2021-05-03, 2021-05-02  2021-05-04
>>> ERROR:  Le seul jour commun possible entre deux courses est le dernier jour de l'une et le premier jour de l'autre.
>>> P45CONTEXT:  PL/pgSQL function f_course_overlap() line 12 at RAISE

/***********************************************************/
/* 3 - Chef de bord
/***********************************************************/

CREATE OR REPLACE FUNCTION f_chefdebord()
RETURNS trigger
AS $$
BEGIN
	IF NOT (SELECT skipper FROM adherent WHERE numadh = new.numadh) THEN
		RAISE EXCEPTION 'Un adhérent doit avoir l''agrément skipper pour être le chef de bord d''un bateau pour une course';
	END IF;
	IF EXISTS(SELECT * FROM equipier WHERE (numcourse, numadh) = (new.numcourse, new.numadh)) THEN
		RAISE EXCEPTION 'Un adhérent ne peut être à la fois chef de bord et équipier pour une même course';
	END IF;
	RETURN new;
END $$
LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER t_chefdebord
BEFORE INSERT OR UPDATE
ON chefdebord
FOR EACH ROW
EXECUTE FUNCTION f_chefdebord();

INSERT INTO chefdebord VALUES (2, 3, 4);
>>> ERROR:  Un adhérent doit avoir l'agrément skipper pour être le chef de bord d'un bateau pour une course
>>> CONTEXT:  PL/pgSQL function f_chefdebord() line 4 at RAISE

UPDATE chefdebord SET numadh = 10 WHERE (numcourse, numadh, numbat) = (1, 2, 3);
>>> ERROR:  Un adhérent ne peut être à la fois chef de bord et équipier pour une même course
>>> CONTEXT:  PL/pgSQL function f_chefdebord() line 7 at RAISE

INSERT INTO chefdebord VALUES (2, 5, 4);
>>> INSERT 0 1

/***********************************************************/
/* 4 - Equipier
/***********************************************************/

CREATE OR REPLACE FUNCTION f_equipier()
RETURNS trigger
AS $$
BEGIN
	IF EXISTS(SELECT * FROM chefdebord WHERE (numcourse, numadh) = (new.numcourse, new.numadh)) THEN
		RAISE EXCEPTION 'Un adhérent ne peut être à la fois chef de bord et équipier pour une même course';
	END IF;
	IF (SELECT count(numadh) FROM equipier WHERE (numbat, numcourse) = (new.numbat, new.numcourse)) + 1  > 
	(SELECT nbplaces FROM bateau WHERE numbat = new.numbat) THEN
		RAISE EXCEPTION 'Il ne peut pas y avoir plus de membres d''équipage que de places sur un bateau';
	END IF;
	RETURN new;
END $$
LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER t_equipier
AFTER INSERT OR UPDATE
ON equipier
FOR EACH ROW
EXECUTE FUNCTION f_equipier();

INSERT INTO equipier VALUES (1, 1, 6);
>>> ERROR:  Un adhérent ne peut être à la fois chef de bord et équipier pour une même course
>>> CONTEXT:  PL/pgSQL function f_equipier() line 4 at RAISE

UPDATE equipier SET numbat = 6 WHERE (numbat, numcourse) = (3, 1);
>>> ERROR:  Il ne peut pas y avoir plus de membres d'équipage que de places sur un bateau
>>> CONTEXT:  PL/pgSQL function f_equipier() line 8 at RAISE

UPDATE equipier SET numbat = 6 WHERE (numcourse, numadh, numbat) = (1, 8, 3);
>>> UPDATE 1

/***********************************************************/
/* 5 - Régate
/***********************************************************/

CREATE OR REPLACE FUNCTION f_regate()
RETURNS trigger
AS $$
DECLARE
	datescourse RECORD;
BEGIN
	SELECT datedebut, datefin INTO datescourse FROM course WHERE numcourse = new.numcourse;
	IF (new.dateregate < datescourse.datedebut) OR (new.dateregate > datescourse.datefin) THEN
		RAISE EXCEPTION 'La date d''une régate doit être dans le créneau de la course';
	END IF;
	RETURN new;
END $$
LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER t_regate
BEFORE INSERT OR UPDATE
ON regate
FOR EACH ROW
EXECUTE FUNCTION f_regate();

UPDATE regate SET dateregate = (SELECT course.datedebut FROM course WHERE course.numcourse = regate.numcourse)-1 WHERE (numcourse, numregate) = (2, 1);
>>> ERROR:  La date d'une régate doit être dans le créneau de la course
>>> CONTEXT:  PL/pgSQL function f_regate() line 7 at RAISE

UPDATE regate SET dateregate = (SELECT course.datedebut FROM course WHERE course.numcourse = regate.numcourse) WHERE (numcourse, numregate) = (2, 1);
>>> UPDATE 1

/***********************************************************/
/* 6 - Résultat 1/2
/***********************************************************/

CREATE OR REPLACE FUNCTION f_resultat()
RETURNS trigger
AS $$
DECLARE
	dateregatecourante DATE;
BEGIN
	IF (TG_OP = 'UPDATE') AND (old.numbat, old.numcourse, old.numregate) != (new.numbat, new.numcourse, new.numregate) THEN
		RAISE EXCEPTION 'Une fois enregistré, la seule mise à jour autorisée d''un résultat est le classement';
	END IF;
	SELECT dateregate INTO dateregatecourante FROM regate WHERE (numcourse, numregate) = (new.numcourse, new.numregate);
	IF (new.numcourse IS NOT NULL) AND (dateregatecourante > current_date) THEN
		IF (TG_OP = 'UPDATE') THEN
			RAISE EXCEPTION 'On ne peut pas enregistrer un classement avant le jour de la regate';
		ELSE 
			new.classement = NULL;
			RAISE NOTICE 'On ne peut pas enregistrer un classement avant le jour de la regate';
		END IF;
	END IF;
	RETURN new;
END $$
LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER t_resultat
BEFORE INSERT OR UPDATE
ON resultat
FOR EACH ROW
EXECUTE FUNCTION f_resultat();

UPDATE resultat SET classement = (SELECT classement FROM resultat WHERE (numbat, numcourse, numregate) = (1, 2, 2)) WHERE numbat = 5;
>>> ERROR:  On ne peut pas enregistrer un classement avant le jour de la regate
>>> CONTEXT:  PL/pgSQL function f_resultat() line 11 at RAISE

UPDATE resultat SET classement = 1 WHERE (numbat, numcourse, numregate) = (2, 2, 1);
>>> ERROR:  On ne peut pas enregistrer un classement avant le jour de la regate
>>> CONTEXT:  PL/pgSQL function f_resultat() line 11 at RAISE

UPDATE resultat SET classement = 1 WHERE (numbat, numcourse, numregate) = (5, 2, 1);
>>> ERROR:  On ne peut pas enregistrer un classement avant le jour de la regate
>>> CONTEXT:  PL/pgSQL function f_resultat() line 11 at RAISE

UPDATE resultat SET classement = 1 WHERE (numbat, numcourse, numregate) = (2, 1, 3);
>>> UPDATE 1

/*=============================*/
/* Section 2 : Autres triggers pour vérifier des contraintes complexes
/*=============================*/
/***********************************************************/
/* 1 - Resultat 2/2
/***********************************************************/

CREATE OR REPLACE FUNCTION f_resultat()
RETURNS trigger
AS $$
DECLARE
	dateregatecourante DATE;
BEGIN
	IF (TG_OP = 'UPDATE') AND (old.numbat, old.numcourse, old.numregate) != (new.numbat, new.numcourse, new.numregate) THEN
		RAISE EXCEPTION 'Une fois enregistré, la seule mise à jour autorisée d''un résultat est le classement';
	END IF;
	SELECT dateregate INTO dateregatecourante FROM regate WHERE (numcourse, numregate) = (new.numcourse, new.numregate);
	IF (new.numcourse IS NOT NULL) AND (dateregatecourante > current_date) THEN
		IF (TG_OP = 'UPDATE') THEN
			RAISE EXCEPTION 'On ne peut pas enregistrer un classement avant le jour de la regate';
		ELSE 
			new.classement = NULL;
			RAISE NOTICE 'On ne peut pas enregistrer un classement avant le jour de la regate';
		END IF;
	END IF;
	IF (new.classement != SELECT count(*) FROM resultat WHERE classement < new.classement AND (numcourse, numregate) = (new.numcourse, new.numregate) + 1) THEN
		RAISE EXCEPTION 'Le classement d''un bateau à une régate doit être égal à 1 plus le nombre de bateaux mieux classés que lui';
	END IF;
	RETURN new;
END $$
LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER t_resultat
BEFORE INSERT OR UPDATE
ON resultat
FOR EACH ROW
EXECUTE FUNCTION f_resultat();

UPDATE resultat SET classement = 1 WHERE (numbat, numcourse, numregate) = (3, 1, 3);
>>> UPDATE 1

UPDATE resultat SET classement = 2 WHERE (numbat, numcourse, numregate) = (6, 1, 3);
>>> ERROR:  Le classement d'un bateau à une régate doit être égal à 1 plus le nombre de bateaux mieux classés que lui
>>> CONTEXT:  PL/pgSQL function f_resultat() line 18 at RAISE

UPDATE resultat SET classement = 3 WHERE (numbat, numcourse, numregate) = (6, 1, 3);
>>> UPDATE 1

/***********************************************************/
/* 2 - Cotisation
/***********************************************************/

PAS FINI

CREATE OR REPLACE FUNCTION f_cotisation()
RETURNS trigger
AS $$
DECLARE
	anneeprecedentepayee BOOLEAN;
BEGIN
	IF (TG_OP = 'UPDATE') AND ((numadh, annee, payé) != (new.numadh, new.annee, new.payé)) THEN
		(new.numadh, new.annee, new.payé) = (numadh, annee, payé);
		RAISE NOTICE 'Une fois une cotisation enregistrée, seul le montant peut être modifié';
	END IF;
	IF new.montant > (SELECT montant FROM tarif WHERE annee = new.annee) THEN
		RAISE EXCEPTION 'Une cotisation ne doit pas dépasser le tarif prévu pour la même année';
	END IF;
	SELECT payé INTO anneeprecedentepayee FROM cotisation WHERE (numadh, annee) = (new.numadh, new.annee-1);
	IF NOT anneeprecedentepayee IS NULL OR
	RETURN new;
END $$
LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER t_cotisation
BEFORE INSERT OR UPDATE
ON cotisation
FOR EACH ROW
EXECUTE FUNCTION f_cotisation();
