/*================================================================*/
/* Martins Felix - TP05 : Triggers pour vérifier des contraintes complexes 
/*================================================================*/

/*=============================*/
/* Section 1 : Triggers pour vérifier des contraintes complexes
/*=============================*/
/***********************************************************/
/* 1 - Adhérent
/***********************************************************/

CREATE OR REPLACE FUNCTION f_adherent_skipper()
RETURNS trigger
AS $$
BEGIN
	IF old.skipper AND NOT new.skipper THEN 
		RAISE EXCEPTION 'Un adherent ne peut pas perdre l''agrément skipper';
	END IF;
	RETURN NULL;
END $$
LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER t_adherent_skipper
AFTER UPDATE
ON adherent
FOR EACH ROW
EXECUTE FUNCTION f_adherent_skipper();

UPDATE adherent SET skipper = false WHERE skipper = true;
>>> ERROR:  Un adherent ne peut pas perdre l'agrément skipper
>>> CONTEXT:  PL/pgSQL function f_adherent_skipper() line 4 at RAISE

UPDATE adherent SET skipper = true WHERE numadh = 18;
>>> UPDATE 1

/***********************************************************/
/* 2 - Course
/***********************************************************/

CREATE OR REPLACE FUNCTION f_course_overlap()
RETURNS trigger
AS $$
DECLARE
	tuple_dates RECORD;
BEGIN
	
	FOR tuple_dates IN 	SELECT datedebut, datefin
						FROM course
	LOOP
		IF (tuple_dates.datedebut, tuple_dates.datefin) 
		OVERLAPS (new.datedebut, new.datefin) THEN
			RAISE NOTICE '%  %, %  %', tuple_dates.datedebut, tuple_dates.datefin, new.datedebut, new.datefin;
			RAISE EXCEPTION 'Le seul jour commun possible entre deux courses est le dernier jour de l''une et le premier jour de l''autre.';
		END IF;
	END LOOP;
	RETURN new;
END $$
LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER t_course_overlap
BEFORE INSERT OR UPDATE
ON course
FOR EACH ROW
EXECUTE FUNCTION f_course_overlap();

insert into course values (3, 'Port_', '2021-05-01', '2021-05-03');
>>> INSERT 0 1

insert into course values (4, 'Port_1', '2021-05-02', '2021-05-04');
>>> NOTICE:  2021-05-01  2021-05-03, 2021-05-02  2021-05-04
>>> ERROR:  Le seul jour commun possible entre deux courses est le dernier jour de l'une et le premier jour de l'autre.
>>> CONTEXT:  PL/pgSQL function f_course_overlap() line 12 at RAISE

insert into course values (4, 'Port_1', '2021-05-03', '2021-05-04');
>>> INSERT 0 1

UPDATE course SET datedebut = '2021-05-02' WHERE numcourse = 4;
>>> NOTICE:  2021-05-01  2021-05-03, 2021-05-02  2021-05-04
>>> ERROR:  Le seul jour commun possible entre deux courses est le dernier jour de l'une et le premier jour de l'autre.
>>> CONTEXT:  PL/pgSQL function f_course_overlap() line 12 at RAISE